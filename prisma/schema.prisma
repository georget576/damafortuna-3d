datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Suit {
  WANDS
  CUPS
  SWORDS
  PENTACLES
}

enum Arcana {
  MAJOR
  MINOR
}

enum SpreadType {
  SINGLE
  THREE_CARD
  CELTIC_CROSS
  CUSTOM
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique()
  emailVerified DateTime?
  image         String?
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts     Account[]
  sessions     Session[]
  readings     Reading[]
  journalEntries JournalEntry[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique()
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique()
  expires    DateTime

  @@unique([identifier, token])
}

model Deck {
  id          String   @id @default(cuid())
  name        String   @unique()
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  tarotCards TarotCard[]
  readings   Reading[]
}

model TarotCard {
  id              String   @id @default(cuid())
  name            String
  arcana          Arcana
  suit            Suit? // nullable for Major Arcana
  number          Int? // nullable for Major Arcana
  keywords        String[] // e.g. ["intuition", "transition"]
  meaningUpright  String?
  meaningReversed String?
  imageUrl        String?
  description     String?
  significance    String?

  deck         Deck          @relation(fields: [deckId], references: [id])
  deckId       String
  readingCards ReadingCard[]
}

model Reading {
  id         String     @id @default(cuid())
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     String
  deck       Deck       @relation(fields: [deckId], references: [id])
  deckId     String
  spreadType SpreadType
  createdAt  DateTime   @default(now())

  readingCards ReadingCard[]
  // back-relation only; no fields or references here
  journalEntry JournalEntry?
}

model ReadingCard {
  id        String    @id @default(cuid())
  reading   Reading   @relation(fields: [readingId], references: [id])
  readingId String
  card      TarotCard @relation(fields: [cardId], references: [id])
  cardId    String

  position   Int // e.g. 0, 1, 2 for a three-card spread
  isReversed Boolean @default(false)
}

model JournalEntry {
  id        String  @id @default(cuid())
  user      User    @relation(fields: [userId], references: [id])
  userId    String
  // this side owns the FK
  reading   Reading @relation(fields: [readingId], references: [id])
  readingId String  @unique()

  title     String?
  slug      String?  @unique
  notes     String
  userNotes String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
